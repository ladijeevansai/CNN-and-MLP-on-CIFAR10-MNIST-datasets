# -*- coding: utf-8 -*-
"""mnist_ cnn_sequential model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TGiVSlCZMmqOhCvnHdGMFcckmHuXul9g
"""

import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation, Dropout
from tensorflow.keras.utils import to_categorical, plot_model
from tensorflow.keras.datasets import mnist
from matplotlib import pyplot as plt

(x_train, y_train), (x_test, y_test) = mnist.load_data()

#reshaping
x_train = x_train.reshape(-1, 28,28, 1)  #-1 neglates tghat attributr
x_test = x_test.reshape(-1, 28,28, 1)

#normalizing between 0-1
x_train = x_train / 255
x_test = x_test / 255

#one-hot encoding
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

CNN = Sequential(name="Sequential_CNN")

CNN.add(Conv2D(16, kernel_size=(3, 3),
               strides=(2, 2), padding="same",
               activation="relu", input_shape=(28, 28, 1)))

CNN.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2),
                     padding="valid"))

# Add another pair of Conv2D and MaxPooling2D for more model depth,
# followed by the flatten and multiple dense layers

CNN.add(Conv2D(32, kernel_size=(3, 3),
               strides=(2, 2), padding="same",
               activation="relu"))

CNN.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2),
                     padding="valid"))

CNN.add(Flatten())

CNN.add(Dense(64, activation='relu'))
CNN.add(Dense(32, activation='relu'))
CNN.add(Dense(10, activation='softmax'))

CNN.summary()

# network parameters
batch_size = 128
hidden_units = 256
dropout = 0.45

CNN.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])
# train the network
CNN.fit(x_train, y_train, epochs=5, batch_size=batch_size)

# validate the model on test dataset to determine generalization
_, acc = CNN.evaluate(x_test,y_test,batch_size=batch_size,verbose=0)
print("\nTest accuracy: %.1f%%" % (100.0 * acc))